" ### VIM CONFIGURATION FILE OF DANIEL DIAZ ###
" 
"   ____   ____
"  |  _ \ |  _ \   Copyright (c) 2020 Daniel Diaz
"  | | | || | | |
"  | |_| || |_| |  http://www.github.com/Daniel1404/
"  |____/ |____/
" 


" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Colorscheme  Dracula,my prefered
Plugin 'dracula/vim', { 'name': 'dracula' }
Plugin 'drewtempelmeyer/palenight.vim'
Plugin 'flazz/vim-colorschemes'             " Colorschemes
" Rainbow pairs
Plugin 'luochen1990/rainbow'
" FILESYSTEM
" Nerdtree
Plugin 'preservim/nerdtree'
Plugin 'ryanoasis/vim-devicons'		" Icons for nerdtree
Plugin 'daniel1404/image.vim'          " My fork of image.vim. Preview images with nerdtree
Plugin 'ctrlpvim/ctrlp.vim'
" FZF
Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plugin 'junegunn/fzf.vim'
" Startify
Plugin 'mhinz/vim-startify'
" Vim powerline and themes
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Markdown files
Plugin 'godlygeek/tabular' | Plugin 'plasticboy/vim-markdown'
Plugin 'iamcco/markdown-preview.nvim'
" CSS colors
Plugin 'ap/vim-css-color'

" Git integration
Plugin 'tpope/vim-fugitive'

" Python Development
Plugin 'vim-scripts/indentpython.vim'
Plugin 'tpope/vim-commentary'               " Comment stuff out
Plugin 'vim-syntastic/syntastic' 	" Sintax highlighting
Plugin 'nvie/vim-flake8'		" PEP 8 CHECKER 
" Plugin 'thaerkh/vim-indentguides'           " Indentation helper
" Plugin 'thaerkh/vim-workspace'              " Session managment
" Django
Plugin 'tweekmonster/django-plus.vim'

" Virtual-envs

Plugin 'jmcantrell/vim-virtualenv'
" Autocomplete
Plugin 'tell-k/vim-autopep8'
Plugin 'jiangmiao/auto-pairs'
Plugin 'neoclide/coc.nvim'
" Snippets

" Snippets engine.
Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

call vundle#end()            " required


" OTHER SETTINGS
" Set the system clipboard instead of vim clipboard
set clipboard=unnamedplus
" set paste
set encoding=utf-8
" Set fonts
if (has("nvim"))
"For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
set termguicolors
endif
set t_Co=256
" Set leader to space
nnoremap <SPACE> <Nop>
let mapleader=" "
" GUI STUFF
" Uncomment next for remove Menubar

" set guioptions -=m 
" Uncomment next for remove Toolbar
if has("gui_running")
  set guioptions -=T
endif

set guifont=Andale\ Mono\ Bold

set tabstop=4
set softtabstop=4
set shiftwidth=4
set textwidth=100
set expandtab
set autoindent
set fileformat=unix

" Rainbow pairs config
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle
" NERDTREE
" Uncomment to Set Nerdtree to open if no files specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <space>n :NERDTreeToggle<CR>
" File systems
"
" Enable folding
set foldmethod=indent
set foldlevel=99

" Favorite colorschemes
" colorscheme SerialExperimentsLain  
" colorscheme SlateDark
" colorscheme molokai
set background=dark
colorscheme palenight


" Set statsuline order
set statusline=%<%f\ %h%m%r%{FugitiveStatusline()}%=%-14.(%l,%c%V%)\ %P

set statusline+=\ %{virtualenv#statusline()}

" Airline theme
" let g:airline_theme='minimalist'
let g:airline_theme = "palenight"
" Italics for palenight
let g:palenight_terminal_italics=1

" Set left side line numbers
set number 

" NERDCOMMENTER
filetype plugin on
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" MY MAPS
" MANAGE WINDOWS
map <leader>h :wincmd h<CR>
map <leader>l :wincmd l<CR>
map <leader>j :wincmd j<CR>
map <leader>k :wincmd k<CR>
map <silent> <leader>w :w<CR>
map <silent> <leader>q :qa<CR>
map <leader>s :sp<CR>
map <silent> <leader>v :vs<CR>
" FOR RESIZE WINDOWS
map <leader><leader> :winc =<CR>
map H :winc <<CR>
map L :winc ><CR>
" For manage tabs
map t :tabnew<cr>
map J :tabp<cr>
map K :tabn<cr>
map x :tabclose<cr>
" map <leader>eo :tabonly<cr>
"""""""""""""""
" CUSTOM VIM BINDINGS
""""""""""""""
" Leader + z for call apps
map <leader>zt :terminal<CR>
map <leader>zs :Startify<CR>

" CTRLP File finder
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

let g:ctrlp_working_path_mode = 'ra'

" Workspaces managment
" Don't autosave
" let g:workspace_autosave = 0
" let g:workspace_autosave_untrailspaces = 0

" let g:workspace_session_directory = $HOME . '/vim-workspaces'

" nnoremap <leader>zw :ToggleWorkspace<CR>
"""""""""""""""""""
" PYTHON SETTINGS
"""""""""""""""
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use space k to show documentation in preview window.
nnoremap <silent> <leader>q :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.


" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
" nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Snippets settings
let g:UltiSnipsExpandTrigger="<leader>"
let g:UltiSnipsJumpForwardTrigger="<M-j>"
let g:UltiSnipsJumpBackwardTrigger="<M-k>"

""""""""""""""""""""
" PYTHON SETTINGS
"""""""""""""""
" Uncomment the following line to save python files on save
" let g:autopep8_on_save = 1
let python_highlight_all=1
syntax on
autocmd FileType python map <buffer> <leader>zc :call flake8#Flake8()<CR>

" Function that reformat Python files and save it.
" I created it since I was unable to use the Autopep8 vim plugin
" I format my files with autopep8 at agressive level 2
function! Save_and_format_python()
  :%! autopep8 -a -a -
  :w
endfunction


map <leader>r :call Save_and_format_python()<CR>

" Set max line lenght to 100
let g:autopep8_max_line_length=100

" Execute current python file in terminal

map <leader>zx :CocCommand python.execInTerminal<CR>


